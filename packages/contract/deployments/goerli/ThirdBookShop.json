{
  "address": "0xC4485100CaF703c6D0eBaB3a4AF3f174938C4fEA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shop_Fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_percentage_Claim",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_book_Contract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usd_Token_Contract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedValue",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "reason",
          "type": "bytes"
        }
      ],
      "name": "FeeNotProcessed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentValue",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "expected",
          "type": "bytes"
        }
      ],
      "name": "InvalidOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughBalance",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "burner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BurntBook",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "ChangedShopFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "publisher",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "PublishedBook",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "PurchasedBook",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bookContract",
      "outputs": [
        {
          "internalType": "contract IERC1155MintableBurnable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "percentageClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "publish",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "purchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shopFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newShopFee",
          "type": "uint256"
        }
      ],
      "name": "updateShopFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdTokenContract",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x06ec7f07738cda39893e585323ff963ff1c42787552600c868aad6e8396dc5bb",
  "receipt": {
    "to": null,
    "from": "0x827FBFf191125bA869d9B38c902c87E79101873e",
    "contractAddress": "0xC4485100CaF703c6D0eBaB3a4AF3f174938C4fEA",
    "transactionIndex": 17,
    "gasUsed": "1975100",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000800000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000002000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000020000000000000000000000000000000000000000000000000004000000000000000",
    "blockHash": "0xb45df5145a19084ed29fd978fbfd43bc5b592dbcc7afdbc7c32781751e01770b",
    "transactionHash": "0x06ec7f07738cda39893e585323ff963ff1c42787552600c868aad6e8396dc5bb",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 7584090,
        "transactionHash": "0x06ec7f07738cda39893e585323ff963ff1c42787552600c868aad6e8396dc5bb",
        "address": "0xC4485100CaF703c6D0eBaB3a4AF3f174938C4fEA",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000827fbff191125ba869d9b38c902c87e79101873e"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0xb45df5145a19084ed29fd978fbfd43bc5b592dbcc7afdbc7c32781751e01770b"
      }
    ],
    "blockNumber": 7584090,
    "cumulativeGasUsed": "6949812",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "10000000000000000",
    2,
    "0x6a274624223daA93d660a69D3b74b85eAc9fb3A2",
    "0x07865c6e87b9f70255377e024ace6630c1eaa37f"
  ],
  "numDeployments": 1,
  "solcInputHash": "51935fa80800d1e21273d51ee43ccabc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shop_Fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentage_Claim\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_book_Contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usd_Token_Contract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"FeeNotProcessed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"expected\",\"type\":\"bytes\"}],\"name\":\"InvalidOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurntBook\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"ChangedShopFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"publisher\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PublishedBook\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PurchasedBook\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bookContract\",\"outputs\":[{\"internalType\":\"contract IERC1155MintableBurnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentageClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"publish\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shopFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newShopFee\",\"type\":\"uint256\"}],\"name\":\"updateShopFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdTokenContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(uint256,uint256)\":{\"params\":{\"_amount\":\"- the amount of (token) with ID (_tokenId) to burn from (msg.sender)\",\"_tokenId\":\"- the token to burn\"}},\"constructor\":{\"params\":{\"_book_Contract\":\"- erc1155 thirdbook token contract\",\"_percentage_Claim\":\"- the percent reserved for shop per each Book purchase\",\"_shop_Fee\":\"- the fee in (wei) charged from a publisher\",\"_usd_Token_Contract\":\"- usdc address.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"publish(uint256,uint256)\":{\"params\":{\"_amount\":\"- the amount of books to be published\",\"_price\":\"- the price of this book  specified in (wei)\"}},\"purchase(uint256)\":{\"params\":{\"_tokenId\":\"- the id of the (book) to purchase payable keyword - playing aroung with gas savings\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateShopFee(uint256)\":{\"details\":\"updates the shop fee in wei to\",\"params\":{\"_newShopFee\":\"- the new fee to charge each publisher before minting\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"- amount of eth in wei to withdraw from this contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256,uint256)\":{\"notice\":\"burns amount of nft with tokenid.\"},\"claimTokens()\":{\"notice\":\"transfer all usdc earned from the purchase of `msg.sender` books to caller\"},\"publish(uint256,uint256)\":{\"notice\":\"mints books of (amount) to the shop\"},\"purchase(uint256)\":{\"notice\":\"purchase an nft (book) with usdc\"},\"withdraw(uint256)\":{\"notice\":\"withraws eth and usdc from this contract to the owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ThirdBookShop.sol\":\"ThirdBookShop\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ThirdBookShop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// THIS CONTRACT IS UN-AUDITED!!.\\n// FOR DEMO PURPOSES!!!\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ninterface IERC1155MintableBurnable is IERC1155 {\\n  function mint(\\n    address account,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) external;\\n\\n  function mintBatch(\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) external;\\n\\n  function burn(\\n    address from,\\n    uint256 id,\\n    uint256 amount\\n  ) external;\\n}\\n\\nerror FeeNotProcessed(uint256 currentValue, uint256 expectedValue, bytes reason);\\nerror NotEnoughBalance();\\nerror InvalidOperation(uint256 currentValue, bytes expected);\\n\\ncontract ThirdBookShop is ERC1155Holder, Ownable {\\n  using Counters for Counters.Counter;\\n\\n  Counters.Counter private tokenIdCounter;\\n\\n  IERC1155MintableBurnable public immutable bookContract;\\n  IERC20 public immutable usdTokenContract;\\n\\n  uint256 public shopFee; // big number 10**18\\n  uint256 public percentageClaim; // whole number\\n  uint256 private totalFeesPaid; // big number 10**18\\n  uint256 private totalShopClaim; // big number 10**6\\n  mapping(uint256 => address) private s_feeReciever; // tokenId to fee receiver\\n  mapping(uint256 => uint256) public s_price; // token id to price in bignumber. eg 5$ === 5 * 10**6\\n  mapping(address => uint256) private s_feeRecieverClaim; // seller to total tokens recieved\\n\\n  /**\\n   * @param _shop_Fee - the fee in (wei) charged from a publisher\\n   * @param _percentage_Claim - the percent reserved for shop per each Book purchase\\n   * @param _book_Contract - erc1155 thirdbook token contract\\n   * @param _usd_Token_Contract - usdc address.\\n   */\\n  constructor(\\n    uint256 _shop_Fee,\\n    uint256 _percentage_Claim,\\n    address _book_Contract,\\n    address _usd_Token_Contract\\n  ) {\\n    shopFee = _shop_Fee;\\n    percentageClaim = _percentage_Claim;\\n    bookContract = IERC1155MintableBurnable(_book_Contract);\\n    usdTokenContract = IERC20(_usd_Token_Contract);\\n  }\\n\\n  event PublishedBook(uint256 tokenId, address publisher, uint256 price);\\n  event PurchasedBook(uint256 tokenId, address buyer, uint256 price);\\n  event BurntBook(uint256 tokenId, address burner, uint256 amount);\\n  event ChangedShopFee(uint256 oldFee, uint256 newFee);\\n\\n  // _price in decimals 10 ** 6, amount in whole numbers\\n  /**\\n   * @notice mints books of (amount) to the shop\\n   * @param _amount - the amount of books to be published\\n   * @param _price - the price of this book  specified in (wei)\\n   */\\n  function publish(uint256 _amount, uint256 _price) public payable {\\n    // shop fee only applies to book publishing\\n    // shop fee is collected in terms native token eth\\n    if (msg.value < shopFee) {\\n      revert FeeNotProcessed({\\n        currentValue: msg.value,\\n        expectedValue: shopFee,\\n        reason: \\\"not enough eth to process transaction\\\"\\n      });\\n    }\\n    // this is a book shop, one book for you, others for sale.\\n    if (_amount < 2) {\\n      revert InvalidOperation({currentValue: _amount, expected: \\\"amount must be greater than 2\\\"});\\n    }\\n\\n    uint256 tokenId = tokenIdCounter.current();\\n    // sets the price of book with id (tokenId) to (_price)\\n    s_price[tokenId] = _price;\\n    // sets the book purchase fee reciever to the owner of the book\\n    s_feeReciever[tokenId] = msg.sender;\\n    tokenIdCounter.increment();\\n    totalFeesPaid += shopFee;\\n    // mints (_amount) books to this contract\\n    bookContract.mint(address(this), tokenId, _amount, \\\"\\\");\\n    // transfers a copy of newly minted books to the publisher\\n    bookContract.safeTransferFrom(address(this), msg.sender, tokenId, 1, \\\"\\\");\\n    emit PublishedBook(tokenId, msg.sender, _price);\\n  }\\n\\n  /**\\n   * @notice purchase an nft (book) with usdc\\n   * @param _tokenId - the id of the (book) to purchase\\n   * payable keyword - playing aroung with gas savings\\n   */\\n  function purchase(uint256 _tokenId) public payable {\\n    if (\\n      // revert if neither contract nor caller has enough balance\\n      (usdTokenContract.balanceOf(msg.sender) < s_price[_tokenId]) ||\\n      (bookContract.balanceOf(address(this), _tokenId) < 1)\\n    ) {\\n      revert NotEnoughBalance();\\n    }\\n    // approve before call\\n    // transfers usdc from msg.sender to contract\\n    bool success = usdTokenContract.transferFrom(msg.sender, address(this), s_price[_tokenId]);\\n    if (success) {\\n      // update book publisher's usdc claim\\n      s_feeRecieverClaim[s_feeReciever[_tokenId]] += s_price[_tokenId];\\n      // transfers book from contract to msg.sender\\n      bookContract.safeTransferFrom(address(this), msg.sender, _tokenId, 1, \\\"\\\");\\n      emit PurchasedBook(_tokenId, msg.sender, s_price[_tokenId]);\\n    }\\n  }\\n\\n  // complete\\n  // amount in whole numbers\\n  /**\\n   * @notice burns amount of nft with tokenid.\\n   * @param _tokenId - the token to burn\\n   * @param _amount - the amount of (token) with ID (_tokenId) to burn from (msg.sender)\\n   */\\n  function burn(uint256 _tokenId, uint256 _amount) public {\\n    if (bookContract.balanceOf(msg.sender, _tokenId) < _amount) {\\n      revert NotEnoughBalance();\\n    }\\n    bookContract.burn(msg.sender, _tokenId, _amount);\\n    emit BurntBook(_tokenId, msg.sender, _amount);\\n  }\\n\\n  // complete. new shop fee in decimals 10 ** 18\\n  /**\\n   * @dev updates the shop fee in wei to\\n   * @param _newShopFee - the new fee to charge each publisher before minting\\n   */\\n  function updateShopFee(uint256 _newShopFee) public onlyOwner {\\n    shopFee = _newShopFee;\\n    emit ChangedShopFee(shopFee, _newShopFee);\\n  }\\n\\n  // may boot this method later\\n  /**\\n   * @notice transfer all usdc earned from the purchase of `msg.sender` books to caller\\n   */\\n  function claimTokens() public {\\n    uint256 amount = s_feeRecieverClaim[msg.sender];\\n    s_feeRecieverClaim[msg.sender] -= amount;\\n    // todo  safemath\\n    // subtracts 2% of the sellers total usdc earned from book purchases\\n    // (2%) goes to shop for each book purchased.\\n    uint256 claimRatio = (amount / 100) * percentageClaim;\\n    totalShopClaim += claimRatio;\\n    usdTokenContract.transfer(msg.sender, amount - claimRatio);\\n  }\\n\\n  /**\\n   * @notice withraws eth and usdc from this contract to the owner\\n   * @param _amount - amount of eth in wei to withdraw from this contract\\n   */\\n  function withdraw(uint256 _amount) public onlyOwner {\\n    if (_amount > totalFeesPaid) {\\n      revert InvalidOperation({\\n        currentValue: _amount,\\n        expected: \\\"amount must be <= total fees paid to the shop\\\"\\n      });\\n    }\\n    totalFeesPaid -= _amount;\\n    (bool success, ) = msg.sender.call{value: _amount}(\\\"\\\");\\n    require(success, \\\"failed to widthraw funds\\\");\\n    usdTokenContract.transfer(msg.sender, totalShopClaim);\\n  }\\n}\\n\",\"keccak256\":\"0x2edcfe936aac11d549d894be286ced0cf356a6367de2fd724656f7fa94330e13\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100fe5760003560e01c80638da5cb5b11610095578063c2e4331511610064578063c2e43315146102fd578063e870138f14610319578063efef39a114610356578063f23a6e6114610372578063f2fde38b146103af576100fe565b80638da5cb5b14610243578063b390c0ab1461026e578063bc197c8114610297578063c2b84d80146102d4576100fe565b80635b7cf14a116100d15780635b7cf14a146101ab5780636fabc501146101d6578063715018a6146102015780637315103714610218576100fe565b806301ffc9a7146101035780632589a9d0146101405780632e1a7d4d1461016b57806348c54b9d14610194575b600080fd5b34801561010f57600080fd5b5061012a6004803603810190610125919061136c565b6103d8565b60405161013791906113b4565b60405180910390f35b34801561014c57600080fd5b50610155610452565b604051610162919061144e565b60405180910390f35b34801561017757600080fd5b50610192600480360381019061018d919061149f565b610476565b005b3480156101a057600080fd5b506101a961062f565b005b3480156101b757600080fd5b506101c06107ae565b6040516101cd91906114db565b60405180910390f35b3480156101e257600080fd5b506101eb6107b4565b6040516101f891906114db565b60405180910390f35b34801561020d57600080fd5b506102166107ba565b005b34801561022457600080fd5b5061022d6107ce565b60405161023a9190611517565b60405180910390f35b34801561024f57600080fd5b506102586107f2565b6040516102659190611553565b60405180910390f35b34801561027a57600080fd5b506102956004803603810190610290919061156e565b61081b565b005b3480156102a357600080fd5b506102be60048036038101906102b991906117e8565b6109bd565b6040516102cb91906118c6565b60405180910390f35b3480156102e057600080fd5b506102fb60048036038101906102f6919061149f565b6109d2565b005b6103176004803603810190610312919061156e565b610a1f565b005b34801561032557600080fd5b50610340600480360381019061033b919061149f565b610cae565b60405161034d91906114db565b60405180910390f35b610370600480360381019061036b919061149f565b610cc6565b005b34801561037e57600080fd5b50610399600480360381019061039491906118e1565b61108f565b6040516103a691906118c6565b60405180910390f35b3480156103bb57600080fd5b506103d660048036038101906103d19190611978565b6110a4565b005b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061044b575061044a82611128565b5b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61047e611192565b6004548111156104c557806040517fde4090830000000000000000000000000000000000000000000000000000000081526004016104bc9190611a28565b60405180910390fd5b80600460008282546104d79190611a85565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161050490611aea565b60006040518083038185875af1925050503d8060008114610541576040519150601f19603f3d011682016040523d82523d6000602084013e610546565b606091505b505090508061058a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058190611b5c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336005546040518363ffffffff1660e01b81526004016105e7929190611b7c565b6020604051808303816000875af1158015610606573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062a9190611bd1565b505050565b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106c29190611a85565b9250508190555060006003546064836106db9190611c2d565b6106e59190611c5e565b905080600560008282546106f99190611cb8565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb3383856107499190611a85565b6040518363ffffffff1660e01b8152600401610766929190611b7c565b6020604051808303816000875af1158015610785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a99190611bd1565b505050565b60025481565b60035481565b6107c2611192565b6107cc6000611210565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1662fdd58e33856040518363ffffffff1660e01b8152600401610876929190611b7c565b602060405180830381865afa158015610893573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b79190611d23565b10156108ef576040517fad3a8b9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f5298aca3384846040518463ffffffff1660e01b815260040161094c93929190611d50565b600060405180830381600087803b15801561096657600080fd5b505af115801561097a573d6000803e3d6000fd5b505050507f0e7c315b5550f34978d3c22fcd4fee0871834baf6a96d3d1950951581ae4d3a78233836040516109b193929190611d87565b60405180910390a15050565b600063bc197c8160e01b905095945050505050565b6109da611192565b806002819055507fc740db4457383a409d8c38dc04c3b076ed9f75d83f581fc25cbc23937b8f05d560025482604051610a14929190611dbe565b60405180910390a150565b600254341015610a6a57346002546040517f5c237d3f000000000000000000000000000000000000000000000000000000008152600401610a61929190611e59565b60405180910390fd5b6002821015610ab057816040517fde409083000000000000000000000000000000000000000000000000000000008152600401610aa79190611ee1565b60405180910390fd5b6000610abc60016112d4565b9050816007600083815260200190815260200160002081905550336006600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610b3260016112e2565b60025460046000828254610b469190611cb8565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663731133e93083866040518463ffffffff1660e01b8152600401610baa93929190611f32565b600060405180830381600087803b158015610bc457600080fd5b505af1158015610bd8573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f242432a30338460016040518563ffffffff1660e01b8152600401610c3c9493929190611fb7565b600060405180830381600087803b158015610c5657600080fd5b505af1158015610c6a573d6000803e3d6000fd5b505050507f0e93c1eb4faa896a4795064479b0d97a92beef1d626046cf64126fb13a405229813384604051610ca193929190611d87565b60405180910390a1505050565b60076020528060005260406000206000915090505481565b60076000828152602001908152602001600020547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610d339190611553565b602060405180830381865afa158015610d50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d749190611d23565b1080610e1a575060017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1662fdd58e30846040518363ffffffff1660e01b8152600401610dd7929190611b7c565b602060405180830381865afa158015610df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e189190611d23565b105b15610e51576040517fad3a8b9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd333060076000878152602001908152602001600020546040518463ffffffff1660e01b8152600401610ec39392919061200f565b6020604051808303816000875af1158015610ee2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f069190611bd1565b9050801561108b576007600083815260200190815260200160002054600860006006600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610fa39190611cb8565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f242432a30338560016040518563ffffffff1660e01b815260040161100a9493929190611fb7565b600060405180830381600087803b15801561102457600080fd5b505af1158015611038573d6000803e3d6000fd5b505050507ff3b07963547ce2f7a8ed8d7b9cd50ac7c18007fe39d7a814cd70e87655323b2e8233600760008681526020019081526020016000205460405161108293929190611d87565b60405180910390a15b5050565b600063f23a6e6160e01b905095945050505050565b6110ac611192565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561111c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611113906120b8565b60405180910390fd5b61112581611210565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61119a6112f8565b73ffffffffffffffffffffffffffffffffffffffff166111b86107f2565b73ffffffffffffffffffffffffffffffffffffffff161461120e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120590612124565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600033905090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61134981611314565b811461135457600080fd5b50565b60008135905061136681611340565b92915050565b6000602082840312156113825761138161130a565b5b600061139084828501611357565b91505092915050565b60008115159050919050565b6113ae81611399565b82525050565b60006020820190506113c960008301846113a5565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061141461140f61140a846113cf565b6113ef565b6113cf565b9050919050565b6000611426826113f9565b9050919050565b60006114388261141b565b9050919050565b6114488161142d565b82525050565b6000602082019050611463600083018461143f565b92915050565b6000819050919050565b61147c81611469565b811461148757600080fd5b50565b60008135905061149981611473565b92915050565b6000602082840312156114b5576114b461130a565b5b60006114c38482850161148a565b91505092915050565b6114d581611469565b82525050565b60006020820190506114f060008301846114cc565b92915050565b60006115018261141b565b9050919050565b611511816114f6565b82525050565b600060208201905061152c6000830184611508565b92915050565b600061153d826113cf565b9050919050565b61154d81611532565b82525050565b60006020820190506115686000830184611544565b92915050565b600080604083850312156115855761158461130a565b5b60006115938582860161148a565b92505060206115a48582860161148a565b9150509250929050565b6115b781611532565b81146115c257600080fd5b50565b6000813590506115d4816115ae565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611628826115df565b810181811067ffffffffffffffff82111715611647576116466115f0565b5b80604052505050565b600061165a611300565b9050611666828261161f565b919050565b600067ffffffffffffffff821115611686576116856115f0565b5b602082029050602081019050919050565b600080fd5b60006116af6116aa8461166b565b611650565b905080838252602082019050602084028301858111156116d2576116d1611697565b5b835b818110156116fb57806116e7888261148a565b8452602084019350506020810190506116d4565b5050509392505050565b600082601f83011261171a576117196115da565b5b813561172a84826020860161169c565b91505092915050565b600080fd5b600067ffffffffffffffff821115611753576117526115f0565b5b61175c826115df565b9050602081019050919050565b82818337600083830152505050565b600061178b61178684611738565b611650565b9050828152602081018484840111156117a7576117a6611733565b5b6117b2848285611769565b509392505050565b600082601f8301126117cf576117ce6115da565b5b81356117df848260208601611778565b91505092915050565b600080600080600060a086880312156118045761180361130a565b5b6000611812888289016115c5565b9550506020611823888289016115c5565b945050604086013567ffffffffffffffff8111156118445761184361130f565b5b61185088828901611705565b935050606086013567ffffffffffffffff8111156118715761187061130f565b5b61187d88828901611705565b925050608086013567ffffffffffffffff81111561189e5761189d61130f565b5b6118aa888289016117ba565b9150509295509295909350565b6118c081611314565b82525050565b60006020820190506118db60008301846118b7565b92915050565b600080600080600060a086880312156118fd576118fc61130a565b5b600061190b888289016115c5565b955050602061191c888289016115c5565b945050604061192d8882890161148a565b935050606061193e8882890161148a565b925050608086013567ffffffffffffffff81111561195f5761195e61130f565b5b61196b888289016117ba565b9150509295509295909350565b60006020828403121561198e5761198d61130a565b5b600061199c848285016115c5565b91505092915050565b600082825260208201905092915050565b7f616d6f756e74206d757374206265203c3d20746f74616c20666565732070616960008201527f6420746f207468652073686f7000000000000000000000000000000000000000602082015250565b6000611a12602d836119a5565b9150611a1d826119b6565b604082019050919050565b6000604082019050611a3d60008301846114cc565b8181036020830152611a4e81611a05565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a9082611469565b9150611a9b83611469565b925082821015611aae57611aad611a56565b5b828203905092915050565b600081905092915050565b50565b6000611ad4600083611ab9565b9150611adf82611ac4565b600082019050919050565b6000611af582611ac7565b9150819050919050565b600082825260208201905092915050565b7f6661696c656420746f2077696474687261772066756e64730000000000000000600082015250565b6000611b46601883611aff565b9150611b5182611b10565b602082019050919050565b60006020820190508181036000830152611b7581611b39565b9050919050565b6000604082019050611b916000830185611544565b611b9e60208301846114cc565b9392505050565b611bae81611399565b8114611bb957600080fd5b50565b600081519050611bcb81611ba5565b92915050565b600060208284031215611be757611be661130a565b5b6000611bf584828501611bbc565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611c3882611469565b9150611c4383611469565b925082611c5357611c52611bfe565b5b828204905092915050565b6000611c6982611469565b9150611c7483611469565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611cad57611cac611a56565b5b828202905092915050565b6000611cc382611469565b9150611cce83611469565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611d0357611d02611a56565b5b828201905092915050565b600081519050611d1d81611473565b92915050565b600060208284031215611d3957611d3861130a565b5b6000611d4784828501611d0e565b91505092915050565b6000606082019050611d656000830186611544565b611d7260208301856114cc565b611d7f60408301846114cc565b949350505050565b6000606082019050611d9c60008301866114cc565b611da96020830185611544565b611db660408301846114cc565b949350505050565b6000604082019050611dd360008301856114cc565b611de060208301846114cc565b9392505050565b7f6e6f7420656e6f7567682065746820746f2070726f63657373207472616e736160008201527f6374696f6e000000000000000000000000000000000000000000000000000000602082015250565b6000611e436025836119a5565b9150611e4e82611de7565b604082019050919050565b6000606082019050611e6e60008301856114cc565b611e7b60208301846114cc565b8181036040830152611e8c81611e36565b90509392505050565b7f616d6f756e74206d7573742062652067726561746572207468616e2032000000600082015250565b6000611ecb601d836119a5565b9150611ed682611e95565b602082019050919050565b6000604082019050611ef660008301846114cc565b8181036020830152611f0781611ebe565b905092915050565b6000611f1c6000836119a5565b9150611f2782611ac4565b600082019050919050565b6000608082019050611f476000830186611544565b611f5460208301856114cc565b611f6160408301846114cc565b8181036060830152611f7281611f0f565b9050949350505050565b6000819050919050565b6000611fa1611f9c611f9784611f7c565b6113ef565b611469565b9050919050565b611fb181611f86565b82525050565b600060a082019050611fcc6000830187611544565b611fd96020830186611544565b611fe660408301856114cc565b611ff36060830184611fa8565b818103608083015261200481611f0f565b905095945050505050565b60006060820190506120246000830186611544565b6120316020830185611544565b61203e60408301846114cc565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006120a2602683611aff565b91506120ad82612046565b604082019050919050565b600060208201905081810360008301526120d181612095565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061210e602083611aff565b9150612119826120d8565b602082019050919050565b6000602082019050818103600083015261213d81612101565b905091905056fea26469706673582212208eb28fba8194004babaaf58d104e7b8af3c594b72ba8f4271b3b5c833c00353a64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "burn(uint256,uint256)": {
        "params": {
          "_amount": "- the amount of (token) with ID (_tokenId) to burn from (msg.sender)",
          "_tokenId": "- the token to burn"
        }
      },
      "constructor": {
        "params": {
          "_book_Contract": "- erc1155 thirdbook token contract",
          "_percentage_Claim": "- the percent reserved for shop per each Book purchase",
          "_shop_Fee": "- the fee in (wei) charged from a publisher",
          "_usd_Token_Contract": "- usdc address."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "publish(uint256,uint256)": {
        "params": {
          "_amount": "- the amount of books to be published",
          "_price": "- the price of this book  specified in (wei)"
        }
      },
      "purchase(uint256)": {
        "params": {
          "_tokenId": "- the id of the (book) to purchase payable keyword - playing aroung with gas savings"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateShopFee(uint256)": {
        "details": "updates the shop fee in wei to",
        "params": {
          "_newShopFee": "- the new fee to charge each publisher before minting"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "- amount of eth in wei to withdraw from this contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint256,uint256)": {
        "notice": "burns amount of nft with tokenid."
      },
      "claimTokens()": {
        "notice": "transfer all usdc earned from the purchase of `msg.sender` books to caller"
      },
      "publish(uint256,uint256)": {
        "notice": "mints books of (amount) to the shop"
      },
      "purchase(uint256)": {
        "notice": "purchase an nft (book) with usdc"
      },
      "withdraw(uint256)": {
        "notice": "withraws eth and usdc from this contract to the owner"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/ThirdBookShop.sol:ThirdBookShop",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3783,
        "contract": "contracts/ThirdBookShop.sol:ThirdBookShop",
        "label": "tokenIdCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)3229_storage"
      },
      {
        "astId": 3791,
        "contract": "contracts/ThirdBookShop.sol:ThirdBookShop",
        "label": "shopFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3793,
        "contract": "contracts/ThirdBookShop.sol:ThirdBookShop",
        "label": "percentageClaim",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3795,
        "contract": "contracts/ThirdBookShop.sol:ThirdBookShop",
        "label": "totalFeesPaid",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3797,
        "contract": "contracts/ThirdBookShop.sol:ThirdBookShop",
        "label": "totalShopClaim",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3801,
        "contract": "contracts/ThirdBookShop.sol:ThirdBookShop",
        "label": "s_feeReciever",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3805,
        "contract": "contracts/ThirdBookShop.sol:ThirdBookShop",
        "label": "s_price",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3809,
        "contract": "contracts/ThirdBookShop.sol:ThirdBookShop",
        "label": "s_feeRecieverClaim",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Counter)3229_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 3228,
            "contract": "contracts/ThirdBookShop.sol:ThirdBookShop",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}